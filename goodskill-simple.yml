version: "3"

services:
  rabbitmq-management:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - somenetwork

  nacos:
    image: nacos/nacos-server:2.0.3
    container_name: nacos
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
    volumes:
      - ./doc/docker/nacos/standalone-logs/:/home/nacos/logs
      - ./doc/docker/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    ports:
      - "8848:8848"
    restart: always
    networks:
      - somenetwork
#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:latest
#    volumes:
#      - ./nacos-docker/prometheus/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    depends_on:
#      - nacos
#    restart: on-failure
#    networks:
#      - somenetwork
#  grafana:
#    container_name: grafana
#    image: grafana/grafana:latest
#    ports:
#      - 3000:3000
#    restart: on-failure
#    networks:
#      - somenetwork

  zookeeper:
    image: zookeeper:3.6.2
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - somenetwork

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "1099:1099"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      #自动创建topic,goodskill-kafka:12:1表示创建“goodskill-kafka”topic,12个分区,1个副本
      KAFKA_CREATE_TOPICS: "goodskill-kafka:12:1"
      JMX_PORT: "1099"
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=1099"
    depends_on:
      - zookeeper
    restart: always
    networks:
      - somenetwork

  kafka-manager:
    image: kafkamanager/kafka-manager
    container_name: kafkamanager
    restart: always
    ports:
      - "9000:9000"
    environment:
      - ZK_HOSTS=zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
    networks:
      - somenetwork

  redis:
    image: redis
    container_name: redis
    restart: always
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "6379:6379"
    networks:
      - somenetwork

  elasticsearch:
    image: elasticsearch:7.16.2
    container_name: elasticsearch
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" #设置使用jvm内存大小
    volumes:
      - ./doc/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
      - ./doc/docker/elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - somenetwork

  kibana:
    image: kibana:7.16.2
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - "elasticsearch.hosts=https://elasticsearch:9200" #设置访问elasticsearch的地址
    ports:
      - "5601:5601"
    networks:
      - somenetwork

  logstash:
    image: logstash:7.16.2
    container_name: logstash
    volumes:
      - ./doc/docker/logstash/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf #挂载logstash的配置文件
    depends_on:
      - elasticsearch
    ports:
      - "4560:4560"
    networks:
      - somenetwork

  mysql:
    image: mysql:8.0.22
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_0900_ai_ci
    volumes:
      - ./goodskill-web/src/main/sql:/docker-entrypoint-initdb.d/
    environment:
      MYSQL_ROOT_PASSWORD: "Password123"
      MYSQL_DATABASE: "seckill"
      MYSQL_USER: "seckill"
      MYSQL_PASSWORD: "Password123"
    networks:
      - somenetwork

  mongo:
    image: mongo:4.4.3
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - somenetwork
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: root

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"
    networks:
      - somenetwork

networks:
  somenetwork:
    driver: bridge