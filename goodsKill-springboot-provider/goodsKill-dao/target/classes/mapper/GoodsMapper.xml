<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.seckill.dao.GoodsMapper">
  <resultMap id="BaseResultMap" type="org.seckill.entity.Goods">
    <id column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="photo_url" jdbcType="VARCHAR" property="photoUrl" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="price" jdbcType="VARCHAR" property="price" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="introduce" jdbcType="VARCHAR" property="introduce" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.seckill.entity.Goods">
    <result column="photo_image" jdbcType="LONGVARBINARY" property="photoImage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    goods_id, photo_url, name, price, create_time, introduce
  </sql>
  <sql id="Blob_Column_List">
    photo_image
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.seckill.entity.GoodsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.seckill.entity.GoodsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from goods
    where goods_id = #{goodsId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods
    where goods_id = #{goodsId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.seckill.entity.Goods">
    insert into goods (goods_id, photo_url, name, 
      price, create_time, introduce, 
      photo_image)
    values (#{goodsId,jdbcType=INTEGER}, #{photoUrl,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{price,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{introduce,jdbcType=VARCHAR}, 
      #{photoImage,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="org.seckill.entity.Goods">
    insert into goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="photoUrl != null">
        photo_url,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="introduce != null">
        introduce,
      </if>
      <if test="photoImage != null">
        photo_image,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="photoUrl != null">
        #{photoUrl,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="introduce != null">
        #{introduce,jdbcType=VARCHAR},
      </if>
      <if test="photoImage != null">
        #{photoImage,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.seckill.entity.Goods">
    update goods
    <set>
      <if test="photoUrl != null">
        photo_url = #{photoUrl,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="introduce != null">
        introduce = #{introduce,jdbcType=VARCHAR},
      </if>
      <if test="photoImage != null">
        photo_image = #{photoImage,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where goods_id = #{goodsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.seckill.entity.Goods">
    update goods
    set photo_url = #{photoUrl,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      introduce = #{introduce,jdbcType=VARCHAR},
      photo_image = #{photoImage,jdbcType=LONGVARBINARY}
    where goods_id = #{goodsId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.seckill.entity.Goods">
    update goods
    set photo_url = #{photoUrl,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      introduce = #{introduce,jdbcType=VARCHAR}
    where goods_id = #{goodsId,jdbcType=INTEGER}
  </update>
</mapper>