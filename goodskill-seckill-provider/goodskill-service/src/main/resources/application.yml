server:
  port: 0

spring:
  application:
    name: goodskill-seckill
  graphql:
    graphiql:
      enabled: true
  kafka:
    consumer:
      group-id: seckill
      ##ensures the new consumer group gets the messages we sent
      auto-offset-reset: earliest
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
  redis:
    redisson:
      ## 注:默认序列化方式Kryo5Codec与spring statemachine依赖冲突,使用json-jackson替代。config后的“|”代表多行文本
      config: |
        codec: !<org.redisson.codec.JsonJacksonCodec> {}
        singleServerConfig:
          password: 123456
          address: "redis://redis:6379"
  output:
    ansi:
      enabled: ALWAYS
  data:
    mongodb:
      database: test
  flyway:
    enabled: false
    baseline-on-migrate: true
    clean-disabled: true
    locations:
      - classpath:db/migration/mysql
  elasticsearch:
    uris: http://elasticsearch:9200
  datasource:
    driver-class-name: org.apache.shardingsphere.driver.ShardingSphereDriver
    url: jdbc:shardingsphere:classpath:sharding-sphere.yml
#    url: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false
    username: root
    password: Password123
#  shardingsphere:
#    datasource:
#      names: ds0,ds1
#      ds0:
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        type: com.zaxxer.hikari.HikariDataSource
#      ds1:
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        type: com.zaxxer.hikari.HikariDataSource
#    sharding:
#      binding-tables: success_killed
#      tables:
#        success_killed:
#          actual-data-nodes: ds$->{0..1}.success_killed_$->{0..1}
#          database-strategy:
#            inline:
#              algorithm-expression: ds$->{seckill_id % 2}
#              sharding-column: seckill_id
#          table-strategy:
#            inline:
#              algorithm-expression: success_killed_$->{user_phone.toLong() % 2}
#              sharding-column: user_phone
#      #必须配置，否则未配置的表会被应用分库分表规则
#      default-data-source-name: ds0
#    props:
#      sql:
#        show: false
  mvc:
    format:
      date: yyyy-MM-dd HH:mm:ss
      date-time: yyyy-MM-dd HH:mm:ss
      time: HH:mm:ss
  rabbitmq:
    port: 5672
    username: guest
    password: guest
  cloud:
    function:
      definition: seckill
    stream:
      bindings:
        seckilResult-out-0:
          destination: seckill-result
        seckill-in-0:
          ##解决重复消费问题，注意：同一组下只消费一次
          group: default
          destination: seckill
        seckillMongoSave-out-0:
          destination: seckill-order-save
      default-binder: rabbit
    sentinel:
      transport:
        port: 8719
        ## 默认端口8080，已改为自定义18088端口，通过http://127.0.0.1:18088/#/dashboard访问
        dashboard: localhost:18088
      ##使用nacos配置中心存储限流规则
      datasource:
        ds0:
          nacos:
            data-id: ${spring.application.name}-flow-rules
            data-type: json
            group-id: DEFAULT_GROUP
            rule-type: flow
            server-addr: nacos:8848
            username: nacos
            password: nacos
dubbo:
  scan:
    base-packages: com.goodskill.service.impl.dubbo
  protocol:
    name: dubbo
    ### 服务暴露端口
    port: -1
    status: server
  registry:
    address: zookeeper://zookeeper:2181
    timeout: 30000
    id: my-registry
  provider:
    timeout: 60000
  application:
    enable-file-cache: false
    ##开启应用级地址注册
    register-mode: instance
    qos-port: 22222

minio:
  endpoint: http://localhost:19000
  accessKey: goodskill
  secretKey: password
  bucketName: goodskill

mybatis-plus:
  global-config:
    db-config:
      logic-delete-field: deleteFlag  # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)

seata:
  enabled: false
  #1.4.2使用此配置禁用seata数据源代理
  enable-auto-data-source-proxy: false
  application-id: goodskill-service-provider
  tx-service-group: my_test_tx_group
  config:
    type: nacos
    nacos:
      namespace: bca6fe13-8ddd-4721-b753-022fe3beabd8
      serverAddr: nacos:8848
      group: SEATA_GROUP
      username: nacos
      password: nacos
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: nacos:8848
      group: SEATA_GROUP
      namespace: bca6fe13-8ddd-4721-b753-022fe3beabd8
      username: nacos
      password: nacos

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    db:
      enabled: false
---
######################docker环境配置#####################
spring:
  ##下面是redis哨兵模式的配置信息
  #    redisson:
  #      config: |
  #        sentinelServersConfig:
  #          checkSentinelsList: false
  #          masterName: mymaster
  #          sentinelAddresses:
  #          - "redis://127.0.0.1:26379"
  #          - "redis://127.0.0.1:26380"
  #          - "redis://127.0.0.1:26381"
  #    sentinel:
  #      master: mymaster
  #      nodes: 127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381
  kafka:
    bootstrap-servers: kafka:9092
  shardingsphere:
    datasource:
      ds0:
        password: Password123
        jdbcUrl: jdbc:mysql://mysql:3306/seckill?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false
        username: root
      ds1:
        password: Password123
        jdbcUrl: jdbc:mysql://mysql:3306/seckill_01?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false
        username: root
  cloud:
    nacos:
      server-addr: nacos:8848
    sentinel:
      datasource:
        ds0:
          nacos:
            server-addr: nacos:8848
  elasticsearch:
    uris: http://elasticsearch:9200
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: guest
    password: guest
  config:
    activate:
      on-profile: docker,dev
  data:
    redis:
      port: 6379
      host: redis
      password: 123456
dubbo:
  registry:
    address: zookeeper://zookeeper:2181
  provider:
    timeout: 30000

zookeeper_ip: zookeeper:2181




